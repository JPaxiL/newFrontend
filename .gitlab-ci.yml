image: node:latest

.docker: &docker
  tags:
  - docker

before_script:
  - npm install

cache:
  paths:
    - node_modules/

stages:
  - build
  - test
  - deploy

# Verify it can build.
build:
  <<: *docker
  stage: build
  only:
    - develop
    - master
  artifacts:
    paths:
    - dist
    # expire_in: 1 week
  script:
    - npm run build

# Verify it passes linting.
test:lint:
  <<: *docker
  stage: test
  only:
    - develop     
  script:
    - npm run lint

# Pass Karma
test:karma:
  <<: *docker
  stage: test
  #image: svaseghi/node-chrome:v1
  before_script:
    - curl -sSL https://dl.google.com/linux/linux_signing_key.pub | apt-key add -     && echo "deb [arch=amd64] https://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list
    - apt-get update && apt-get install  google-chrome-stable     --no-install-recommends -y &> /dev/null
    # - export CHROME_BIN=/usr/bin/chromium-browser
    - export CHROME_BIN=/usr/bin/google-chrome   
  only:
    - develop  
  script:
    - npm run testKarma
    # - npm run test

# Push to GITHUB
deploy:github:
  <<: *docker
  stage: deploy
  only:
    - master
  script:
    # Setup ssh with the key and trust the destination.

    - echo "====== Deploy to production server ======"
    # Add target server`s secret key
    - mkdir ~/.ssh
    - echo -e "${TARGET_SERVER_SECRET_KEY_BASE64//_/\\n}" > ~/.ssh/id_rsa
    #- eval $(ssh-agent -s)
    #- echo "$TARGET_SERVER_SECRET_KEY_BASE64" | tr -d '\r' | ssh-add - > /dev/null
    - chmod 700 ~/.ssh && chmod 600 ~/.ssh/*
    - echo "Test ssh connection"
    #- ssh -o StrictHostKeyChecking=no -T "gltracker@$TARGET_SERVER_HOST"
    - scp -r dist/ "gltracker@$TARGET_SERVER_HOST:/home/gltracker" 
    # - ssh -o StrictHostKeyChecking=no -T "gltracker@$TARGET_SERVER_HOST" -p 22
    # Delploy
    - echo "Setup tagget server directories"
    - cat package.json
    - pwd 
    # - pm2 deploy ecosystem.config.js production setup 2>&1 || true
    - echo "make deploy"
    # - pm2 deploy ecosystem.config.js production


    # - eval $(ssh-agent -s)
    # - echo "${GITHUB_TOKEN}" | ssh-add -
    # - mkdir -p ~/.ssh
    # - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

    # # (Re)configure git and push w/ tags.
    # - git config user.name "${GITHUB_USER_NAME}"
    # - git config user.email "${GITHUB_USER_EMAIL}"
    # - git remote set-url origin ${GITHUB_REPO}
    # - git push origin master --follow-tags

# Push to NPM
# deploy:npm:
#   <<: *docker
#   stage: deploy
#   only:
#     - feature/deploy
#   script:
#     # Build the library, publish dist.
#     - echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
#     - npm run build
#     - npm run dist